version: '3.9'

services:
  mysql:
    image: mysql:8
    container_name: mysql
    ports:
      - "3307:3306"  # map to host's 3306 if it's free
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - mysql-data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:4.0.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_KRAFT_CLUSTER_ID: kafka-cluster-id-1234567890abcdef
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka-data:/bitnami/kafka
    networks:
      - backend

  user-service:
    image: vinayaksb24/user-service
    container_name: user-service
    ports:
      - "9002:9002"
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
          condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/user_db
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - backend

  journal-service:
    image: vinayaksb24/journal-service
    container_name: journal-service
    ports:
      - "9003:9003"
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started
      user-service:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/journal_db
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - backend

volumes:
  mysql-data:
  kafka-data:

networks:
  backend:
